name: 'Build Validation'

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Validate Tauri builds on all platforms
  build-validation:
    name: 'Build Validation - ${{ matrix.platform }}'
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target universal-apple-darwin'
            artifact_name: 'macos'
            os_deps: ''
          - platform: 'ubuntu-22.04'
            args: ''
            artifact_name: 'linux'
            os_deps: 'libwebkit2gtk-4.1-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev libssl-dev libxdo-dev'
          - platform: 'windows-latest'
            args: ''
            artifact_name: 'windows'
            os_deps: ''

    runs-on: ${{ matrix.platform }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          key: build-${{ matrix.platform }}-${{ hashFiles('**/Cargo.lock') }}
          cache-on-failure: true

      # Platform-specific dependencies
      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y ${{ matrix.os_deps }}

      - name: Install Node.js dependencies
        run: npm ci

      # Build Bifrost binary for inclusion
      - name: Build Bifrost binary
        run: |
          chmod +x scripts/build-bifrost-for-tauri.sh
          ./scripts/build-bifrost-for-tauri.sh
        shell: bash

      # Validate frontend build
      - name: Build frontend
        run: npm run build

      # Validate Storybook build
      - name: Build Storybook
        run: npm run build-storybook

      # Validate Tauri debug build (faster than release)
      - name: Build Tauri application (debug)
        run: |
          cd src-tauri
          cargo build --verbose

      # Test that the binary can start (basic smoke test)
      - name: Smoke test binary
        run: |
          cd src-tauri/target/debug
          
          # Different binary names per platform
          if [[ "${{ matrix.platform }}" == "windows-latest" ]]; then
            BINARY="mindlink.exe"
          else
            BINARY="mindlink"
          fi
          
          # Check if binary exists
          if [ -f "$BINARY" ]; then
            echo "‚úÖ Binary built successfully: $BINARY"
            
            # Check binary size
            BINARY_SIZE=$(du -h "$BINARY" | cut -f1)
            echo "Binary size: $BINARY_SIZE"
            
            # Try to get version/help (with timeout to avoid hanging)
            timeout 10s ./"$BINARY" --version || echo "Version check completed"
          else
            echo "‚ùå Binary not found: $BINARY"
            exit 1
          fi

      # Bundle size analysis
      - name: Analyze build artifacts
        run: |
          echo "## üìä Build Analysis - ${{ matrix.artifact_name }}" > build-analysis.md
          echo "" >> build-analysis.md
          
          # Frontend bundle analysis
          if [ -d "dist" ]; then
            FRONTEND_SIZE=$(du -sh dist/ | cut -f1)
            echo "### Frontend Bundle" >> build-analysis.md
            echo "- **Size**: $FRONTEND_SIZE" >> build-analysis.md
            echo "- **Files**: $(find dist -type f | wc -l) files" >> build-analysis.md
            echo "" >> build-analysis.md
          fi
          
          # Storybook bundle analysis
          if [ -d "storybook-static" ]; then
            STORYBOOK_SIZE=$(du -sh storybook-static/ | cut -f1)
            echo "### Storybook Bundle" >> build-analysis.md
            echo "- **Size**: $STORYBOOK_SIZE" >> build-analysis.md
            echo "- **Files**: $(find storybook-static -type f | wc -l) files" >> build-analysis.md
            echo "" >> build-analysis.md
          fi
          
          # Rust binary analysis
          cd src-tauri/target/debug
          if [[ "${{ matrix.platform }}" == "windows-latest" ]]; then
            BINARY="mindlink.exe"
          else
            BINARY="mindlink"
          fi
          
          if [ -f "$BINARY" ]; then
            BINARY_SIZE=$(du -h "$BINARY" | cut -f1)
            echo "### Rust Binary (Debug)" >> ../../build-analysis.md
            echo "- **Size**: $BINARY_SIZE" >> ../../build-analysis.md
            echo "- **Platform**: ${{ matrix.platform }}" >> ../../build-analysis.md
            echo "- **Build Type**: Debug (optimized for compilation speed)" >> ../../build-analysis.md
          fi
          
          cd ../../
          echo "" >> build-analysis.md
          echo "### Build Environment" >> build-analysis.md
          echo "- **Platform**: ${{ matrix.platform }}" >> build-analysis.md
          echo "- **Rust Version**: $(rustc --version)" >> build-analysis.md
          echo "- **Node Version**: $(node --version)" >> build-analysis.md
          echo "- **Build Time**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> build-analysis.md
          
          cat build-analysis.md

      # Upload build artifacts for inspection
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-validation-${{ matrix.artifact_name }}
          path: |
            dist/
            storybook-static/
            build-analysis.md
            src-tauri/target/debug/mindlink*
          retention-days: 7

  # Bundle size tracking and reporting
  bundle-analysis:
    name: 'Bundle Size Analysis'
    needs: build-validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Download Linux build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-validation-linux
          path: artifacts/

      - name: Analyze bundle sizes
        run: |
          echo "## üì¶ Bundle Size Report" > bundle-report.md
          echo "" >> bundle-report.md
          
          # Frontend bundle
          if [ -d "artifacts/dist" ]; then
            FRONTEND_SIZE_KB=$(du -sk artifacts/dist | cut -f1)
            FRONTEND_SIZE_MB=$(echo "scale=2; $FRONTEND_SIZE_KB / 1024" | bc)
            echo "### Frontend Bundle" >> bundle-report.md
            echo "- **Size**: ${FRONTEND_SIZE_MB} MB (${FRONTEND_SIZE_KB} KB)" >> bundle-report.md
            
            # Check if size is reasonable (under 10MB for frontend)
            if [ $FRONTEND_SIZE_KB -lt 10240 ]; then
              echo "- **Status**: ‚úÖ Size is optimal (<10MB)" >> bundle-report.md
            elif [ $FRONTEND_SIZE_KB -lt 20480 ]; then
              echo "- **Status**: ‚ö†Ô∏è Size is acceptable (<20MB)" >> bundle-report.md
            else
              echo "- **Status**: ‚ùå Size is too large (>20MB)" >> bundle-report.md
            fi
            
            # Breakdown of largest files
            echo "- **Largest Files**:" >> bundle-report.md
            find artifacts/dist -type f -exec du -h {} + | sort -rh | head -5 | while read size file; do
              echo "  - $(basename "$file"): $size" >> bundle-report.md
            done
            echo "" >> bundle-report.md
          fi
          
          # Storybook bundle
          if [ -d "artifacts/storybook-static" ]; then
            STORYBOOK_SIZE_KB=$(du -sk artifacts/storybook-static | cut -f1)
            STORYBOOK_SIZE_MB=$(echo "scale=2; $STORYBOOK_SIZE_KB / 1024" | bc)
            echo "### Storybook Bundle" >> bundle-report.md
            echo "- **Size**: ${STORYBOOK_SIZE_MB} MB (${STORYBOOK_SIZE_KB} KB)" >> bundle-report.md
            echo "- **Purpose**: Component development and documentation" >> bundle-report.md
            echo "" >> bundle-report.md
          fi
          
          # Binary size
          if [ -f "artifacts/mindlink" ]; then
            BINARY_SIZE_KB=$(du -sk artifacts/mindlink | cut -f1)
            BINARY_SIZE_MB=$(echo "scale=2; $BINARY_SIZE_KB / 1024" | bc)
            echo "### Rust Binary (Debug)" >> bundle-report.md
            echo "- **Size**: ${BINARY_SIZE_MB} MB (${BINARY_SIZE_KB} KB)" >> bundle-report.md
            echo "- **Note**: Debug build (release builds are smaller)" >> bundle-report.md
            echo "" >> bundle-report.md
          fi
          
          echo "### Recommendations" >> bundle-report.md
          echo "- Frontend bundle size is acceptable for a desktop application" >> bundle-report.md
          echo "- Storybook is used for development only (not included in production)" >> bundle-report.md
          echo "- Release builds will be significantly smaller due to optimizations" >> bundle-report.md
          
          cat bundle-report.md

      - name: Comment bundle size on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const bundleReport = fs.readFileSync('bundle-report.md', 'utf8');
            
            const comment = `## üì¶ Bundle Size Analysis
            
            ${bundleReport}
            
            [üìã View Full Build Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis-${{ github.run_number }}
          path: bundle-report.md
          retention-days: 30

  # Build summary
  build-summary:
    name: 'Build Summary'
    needs: [build-validation, bundle-analysis]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Generate build summary
        run: |
          echo "## üî® Build Validation Summary" > build-summary.md
          echo "" >> build-summary.md
          
          # Check build results for each platform
          MACOS_STATUS="${{ needs.build-validation.result }}"
          LINUX_STATUS="${{ needs.build-validation.result }}"
          WINDOWS_STATUS="${{ needs.build-validation.result }}"
          BUNDLE_STATUS="${{ needs.bundle-analysis.result }}"
          
          echo "### Platform Build Status" >> build-summary.md
          echo "- **macOS**: $([ "$MACOS_STATUS" = "success" ] && echo "‚úÖ PASSED" || echo "‚ùå FAILED")" >> build-summary.md
          echo "- **Linux**: $([ "$LINUX_STATUS" = "success" ] && echo "‚úÖ PASSED" || echo "‚ùå FAILED")" >> build-summary.md
          echo "- **Windows**: $([ "$WINDOWS_STATUS" = "success" ] && echo "‚úÖ PASSED" || echo "‚ùå FAILED")" >> build-summary.md
          echo "- **Bundle Analysis**: $([ "$BUNDLE_STATUS" = "success" ] && echo "‚úÖ PASSED" || echo "‚ùå FAILED")" >> build-summary.md
          echo "" >> build-summary.md
          
          # Overall status
          if [ "$MACOS_STATUS" = "success" ] && [ "$LINUX_STATUS" = "success" ] && [ "$WINDOWS_STATUS" = "success" ] && [ "$BUNDLE_STATUS" = "success" ]; then
            echo "### ‚úÖ Overall Status: ALL BUILDS PASSED" >> build-summary.md
            echo "All platform builds completed successfully. Application is ready for release builds." >> build-summary.md
          else
            echo "### ‚ùå Overall Status: BUILD FAILURES DETECTED" >> build-summary.md
            echo "One or more platform builds failed. Please review logs and fix issues." >> build-summary.md
          fi
          
          echo "" >> build-summary.md
          echo "### Next Steps" >> build-summary.md
          if [ "$MACOS_STATUS" = "success" ] && [ "$LINUX_STATUS" = "success" ] && [ "$WINDOWS_STATUS" = "success" ]; then
            echo "- ‚úÖ Builds validated on all platforms" >> build-summary.md
            echo "- ‚úÖ Bundle sizes analyzed and approved" >> build-summary.md
            echo "- üöÄ Ready for release workflow when tagged" >> build-summary.md
          else
            echo "- ‚ùå Fix failing platform builds before proceeding" >> build-summary.md
            echo "- üîç Review build logs for error details" >> build-summary.md
            echo "- üõ†Ô∏è Test locally on affected platforms" >> build-summary.md
          fi
          
          cat build-summary.md

      - name: Upload build summary
        uses: actions/upload-artifact@v4
        with:
          name: build-summary-${{ github.run_number }}
          path: build-summary.md
          retention-days: 30